as.date(sites_reps$start_Date)- as.Date(sites_reps$end_Date)
as.Date(sites_reps$start_Date)- as.Date(sites_reps$end_Date)
as.integer(sites_reps$start_Date)- as.integer(sites_reps$end_Date)
as.integer(sites_reps$end_Date)- as.integer(sites_reps$start_Date)
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- as.integer(sites_reps$end_Date)- as.integer(sites_reps$start_Date)
sites_reps[sites_reps$check != sites_reps$rep.yrs,]
anytime::anydate(sites_reps$end_Date)
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- anytime::anydate(sites_reps$end_Date)- anytime::anydate(sites_reps$start_Date)
sites_reps[sites_reps$check != sites_reps$rep.yrs,]
class(as.numeric(format(sites_reps$end_Date, "%Y")))
class(format(sites_reps$end_Date, "%Y"))
format(sites_reps$end_Date, "%Y")
### now for the length of storage vess: 12 different month and dfs combos --
months_list<- vector(mode="list", length=length(storage.vess)*12) # one for each month
counter = 0
for(m in 1:12){
for(i in 1:length(storage.vess)){  # so 12 months per cld # 12 * 11 (sites - climvar - month combos)
#12 sites - 11 climvars - 12 month combos  -- so 1,320 dfs
## first 11 (climvars) are dfs of each location with climvar
## 12 months and 166 dataframes with climvar data per sites
## 12 months and 22 dataframes == 12*22 == 264
## so for every dataframe I want to make 12 out of each so 12*166 == 1992
counter = counter+1
print(paste0("month ", m, " i ", i, " counter for dataframes from storage vess (made of 11 diff climvars and each site) ", counter))
months_list[[counter]]<- storage.vess[[i]] %>%  dplyr::filter(climvar.class ==storage.vess[[i]]$climvar.class[1] & month ==m)
#### REPS MONTH ANALYSIS --------------------
if(nrow(months_list[[counter]]) !=0){ # if the dataframe is empty dont go in here
repsmo<- rle(months_list[[counter]][,3])
end = cumsum(repsmo$lengths)
start = c(1, lag(end)[-1] + 1) # https://stackoverflow.com/questions/43875716/find-start-and-end-positions-indices-of-runs-consecutive-values
start.end.indices <-data.frame(start,end) #lags by one - shifts to the left , -1 puts it back ot original place and +1 adds the number to index (c(1)) - lag maintains length
start.df<-months_list[[counter]][start,] # add colanmes to start and end values
end.df<- months_list[[counter]][end,]
colnames(start.df) <- paste0('start_', colnames(start.df))
colnames(end.df) <- paste0('end_', colnames(end.df))
df.indices<-cbind(start.df,end.df) # bind both dataframes
rownames(df.indices)<-c(1:nrow(df.indices)) #change rownames to sequential order
selection<-cbind(df.indices, start.end.indices) # add start and end indices column
selection$rep.yrs <-selection$end -selection$start # 0 is a 0
selection<- selection %>% filter(selection$rep.yrs>=2) # grab only repitions greater than 2 years
selection$rep.yrs <- selection$rep.yrs+1 # add one to all instances to account for start years
months_list[[counter]]<- selection
# ## arrange for ease of viewing, select only relevent variables
months_list[[counter]]<-months_list[[counter]] %>% arrange(desc(rep.yrs))
months_list[[counter]]<- months_list[[counter]][c('start_sites.sitename', 'start_Date', 'start_climvar.val', 'start_climvar.class', 'start_month', 'end_Date', 'rep.yrs')]
#
# # ## grab years only for start / end dates
months_list[[counter]]$start_Date<-as.numeric(format(months_list[[counter]]$start_Date,"%Y"))
months_list[[counter]]$end_Date<-as.numeric(format(months_list[[counter]]$end_Date,"%Y"))
#
# # ## Exclude frs=0
months_list[[counter]]<-months_list[[counter]] %>% filter(start_climvar.class != "frs" & start_climvar.val !=0)
}
}
}
## make DF from list above with all the relevent info for each sites (reps/year ranges)
sites_reps<-do.call("rbind", months_list)
class(sites_reps$start_Date)
sites_reps$end_Date- sites_reps$start_Date
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date
sites_reps[sites_reps$check != sites_reps$rep.yrs,]
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date +1
sites_reps[sites_reps$check != sites_reps$rep.yrs,]
problemsites<- sites_reps[sites_reps$check != sites_reps$rep.yrs,]
View(problemsites)
# Clean environment ####
rm(list = ls())
#### Sites --------
# ForestGeo sites (and their locations) found in github (all 69)
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
# See comments @ end of code for site indices
fsites<-c("Smithsonian Environmental Research Center","Harvard Forest"
,"Smithsonian Conservation Biology Institute", "Lilly Dickey Woods"
,"Ordway-Swisher"                             ,"Yosemite National Park"
,"Wind River"                                 ,"Utah Forest Dynamics Plot"
,"Huai Kha Khaeng"                            ,"Barro Colorado Island",
"Zofin", "Scotty Creek")
## reconstructing by one to debug
fsites <- c("Barro Colorado Island", "Scotty Creek")
# Sites in climate data have _ so replace space with _ to match later
fsites<- gsub(" ", "_", fsites)
path_to_climate_data <- "https://raw.githubusercontent.com/forestgeo/Climate/master/Climate_Data/CRU/CRU_v4_04/"
v<- c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmn", "tmx", "vap", "wet")
objs<- vector(mode = "list", length = length(v))
counter <- 0
for(clim_v in v) { #  clim_v is each climate variable (v)
counter<- counter + 1
print(paste0(clim_v, " ", counter))
objs[[counter]]<-read.csv(paste0(path_to_climate_data, clim_v, ".1901.2019-ForestGEO_sites-6-03.csv"))
names(objs)[counter] <- clim_v # assign names to list
# adding a col that will show the climate variable (ie cld or pet)
objs[[counter]]$clim<-  gsub(names(objs[counter]), v[counter], names(objs[counter]), ignore.case = FALSE)
}
# CRU data with final sites and storage vessel list for the long format of data
CRU_fsites <- vector(mode="list", length=length(fsites)*length(v)) # I should have ten of each site (so fsites*v)
storage.vess<- vector(mode="list", length=length(fsites)*length(v)) # and I should have a storage vessel with just as manny
counter=0
for(j in fsites){ # 110 times because 11 clim vars and 10 sites
for(i in seq_along(v)){
# for(v in c(“pet”,tmx”,...))
# i is seq # 1-11 of climvar objs ----- j is fsite raw - smithsonian ---- counter is the iterative # ie 110
# for each climvar in objs we should have a smithsonian for cld smithsonian for dtr etc et
#### Select only FSITES from climvar data
counter <- counter +1 # running fsites* clim vars
print(paste0(j," counter # ", counter, " and clim var ", names(objs[i])))
CRU_fsites[[counter]] <- objs[[i]][match(j, objs[[i]]$sites.sitename),] #go through each climvar and find the specified J aka site
#### Transform data to long format
df<- as.data.frame(CRU_fsites[[counter]]) # make df object
df_long<- reshape(df, #reshape data for plot
times =gsub("X", "", names(df)[-1]),
timevar = "Date",
varying = list(colnames(df[-1])),
v.names = paste0(df$clim),
direction = "long",)
storage.vess[[counter]]<- df_long # store newly reshaped data in new storage vessel
names(storage.vess)[counter] <- j
storage.vess[[counter]]$Date<- anytime::anydate(storage.vess[[counter]]$Date) # change to Date format
storage.vess[[counter]]$climvar <- rep(names(storage.vess[[counter]])[3], times=nrow(storage.vess[[counter]])) # add the climvar column here (needs to be index)
storage.vess[[counter]][,"month"] <- format(storage.vess[[counter]][,"Date"], "%m") # add month col for later processing! --
storage.vess[[counter]]<-storage.vess[[counter]][order(as.numeric(storage.vess[[counter]]$month)),] # order the columns by month so we can use the RLE function
storage.vess[[counter]]<- storage.vess[[counter]] %>%
rename(climvar.class =climvar,
climvar.val = names(storage.vess[[counter]][3]))
# ## We'll want to exclude frs=0
storage.vess[[counter]]<-storage.vess[[counter]] %>% filter(climvar.class != "frs" & climvar.val !=0)
# if months_list length < 12
# for (m in months) ## do this reps stuff and then put back in storage vess
storage.vess[[counter]]$month <-as.integer(gsub(0, '', storage.vess[[counter]]$month))
# for every site filter and every clim var - IE BCI cld for january  -BCI cld for february -BCI cld formarch
# j is every site
}
}
storage.vess[[2]] %>% View
storage.vess[[4]] %>% View
storage.vess[[15]] %>% View
### now for the length of storage vess: 12 different month and dfs combos --
months_list<- vector(mode="list", length=length(storage.vess)*12) # one for each month
counter = 0
for(m in 1:12){
for(i in 1:length(storage.vess)){  # so 12 months per cld # 12 * 11 (sites - climvar - month combos)
#12 sites - 11 climvars - 12 month combos  -- so 1,320 dfs
## first 11 (climvars) are dfs of each location with climvar
## 12 months and 166 dataframes with climvar data per sites
## 12 months and 22 dataframes == 12*22 == 264
## so for every dataframe I want to make 12 out of each so 12*166 == 1992
counter = counter+1
print(paste0("month ", m, " i ", i, " counter for dataframes from storage vess (made of 11 diff climvars and each site) ", counter))
months_list[[counter]]<- storage.vess[[i]] %>%  dplyr::filter(climvar.class ==storage.vess[[i]]$climvar.class[1] & month ==m)
#### REPS MONTH ANALYSIS --------------------
if(nrow(months_list[[counter]]) !=0){ # if the dataframe is empty dont go in here
repsmo<- rle(months_list[[counter]][,3])
end = cumsum(repsmo$lengths)
start = c(1, lag(end)[-1] + 1) # https://stackoverflow.com/questions/43875716/find-start-and-end-positions-indices-of-runs-consecutive-values
start.end.indices <-data.frame(start,end) #lags by one - shifts to the left , -1 puts it back ot original place and +1 adds the number to index (c(1)) - lag maintains length
start.df<-months_list[[counter]][start,] # add colanmes to start and end values
end.df<- months_list[[counter]][end,]
colnames(start.df) <- paste0('start_', colnames(start.df))
colnames(end.df) <- paste0('end_', colnames(end.df))
df.indices<-cbind(start.df,end.df) # bind both dataframes
rownames(df.indices)<-c(1:nrow(df.indices)) #change rownames to sequential order
selection<-cbind(df.indices, start.end.indices) # add start and end indices column
selection$rep.yrs <-selection$end -selection$start # 0 is a 0
selection<- selection %>% filter(selection$rep.yrs>=2) # grab only repitions greater than 2 years
selection$rep.yrs <- selection$rep.yrs+1 # add one to all instances to account for start years
months_list[[counter]]<- selection
# ## arrange for ease of viewing, select only relevent variables
months_list[[counter]]<-months_list[[counter]] %>% arrange(desc(rep.yrs))
months_list[[counter]]<- months_list[[counter]][c('start_sites.sitename', 'start_Date', 'start_climvar.val', 'start_climvar.class', 'start_month', 'end_Date', 'rep.yrs')]
#
# # ## grab years only for start / end dates
months_list[[counter]]$start_Date<-as.numeric(format(months_list[[counter]]$start_Date,"%Y"))
months_list[[counter]]$end_Date<-as.numeric(format(months_list[[counter]]$end_Date,"%Y"))
#
# # ## Exclude frs=0
months_list[[counter]]<-months_list[[counter]] %>% filter(start_climvar.class != "frs" & start_climvar.val !=0)
}
}
}
## make DF from list above with all the relevent info for each sites (reps/year ranges)
sites_reps<-do.call("rbind", months_list)
View(sites_reps)
months_list[[3]]
months_list[[2]]
months_list[[2]] %>% View()
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date
problemsites<- sites_reps[sites_reps$check != sites_reps$rep.yrs,]
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date+1
problemsites<- sites_reps[sites_reps$check != sites_reps$rep.yrs,]
storage.vess[[12]]
storage.vess[[13]]
storage.vess[[14]]
storage.vess[[15]]
storage.vess[[15]] %>% View()
storage.vess[[2]] %>% View()
storage.vess[[1]] %>% View()
format(storage.vess[[counter]][,"Date"], "%m")
counter
counter=1
format(storage.vess[[counter]][,"Date"], "%m")
format(storage.vess[[counter]][,"Date"], "%m") %>% View()
counter=2
format(storage.vess[[counter]][,"Date"], "%m") %>% View()
storage.vess[[counter]] %>% View()
storage.vess[[counter]][,"month"] <- format(storage.vess[[counter]][,"Date"], "%m") # add month col for later processing! --
storage.vess[[counter]]<-storage.vess[[counter]][order(as.numeric(storage.vess[[counter]]$month)),] # order the columns by month so we can use the RLE function
storage.vess[[counter]]<- storage.vess[[counter]] %>%
rename(climvar.class =climvar,
climvar.val = names(storage.vess[[counter]][3]))
storage.vess[[counter]] %>% head()
storage.vess[[counter]] %>% View()
class(storage.vess[[counter]])
class(storage.vess[[counter]]$month)
# CRU data with final sites and storage vessel list for the long format of data
CRU_fsites <- vector(mode="list", length=length(fsites)*length(v)) # I should have ten of each site (so fsites*v)
storage.vess<- vector(mode="list", length=length(fsites)*length(v)) # and I should have a storage vessel with just as manny
counter=0
for(j in fsites){ # 110 times because 11 clim vars and 10 sites
for(i in seq_along(v)){
# for(v in c(“pet”,tmx”,...))
# i is seq # 1-11 of climvar objs ----- j is fsite raw - smithsonian ---- counter is the iterative # ie 110
# for each climvar in objs we should have a smithsonian for cld smithsonian for dtr etc et
#### Select only FSITES from climvar data
counter <- counter +1 # running fsites* clim vars
print(paste0(j," counter # ", counter, " and clim var ", names(objs[i])))
CRU_fsites[[counter]] <- objs[[i]][match(j, objs[[i]]$sites.sitename),] #go through each climvar and find the specified J aka site
#### Transform data to long format
df<- as.data.frame(CRU_fsites[[counter]]) # make df object
df_long<- reshape(df, #reshape data for plot
times =gsub("X", "", names(df)[-1]),
timevar = "Date",
varying = list(colnames(df[-1])),
v.names = paste0(df$clim),
direction = "long",)
storage.vess[[counter]]<- df_long # store newly reshaped data in new storage vessel
names(storage.vess)[counter] <- j
storage.vess[[counter]]$Date<- anytime::anydate(storage.vess[[counter]]$Date) # change to Date format
storage.vess[[counter]]$climvar <- rep(names(storage.vess[[counter]])[3], times=nrow(storage.vess[[counter]])) # add the climvar column here (needs to be index)
storage.vess[[counter]][,"month"] <- format(storage.vess[[counter]][,"Date"], "%m") # add month col for later processing! --
storage.vess[[counter]]<-storage.vess[[counter]][order(as.numeric(storage.vess[[counter]]$month)),] # order the columns by month so we can use the RLE function
storage.vess[[counter]]<- storage.vess[[counter]] %>%
rename(climvar.class =climvar,
climvar.val = names(storage.vess[[counter]][3]))
# ## We'll want to exclude frs=0
storage.vess[[counter]]<-storage.vess[[counter]] %>% filter(climvar.class != "frs" & climvar.val !=0)
# storage.vess[[counter]]$month <-as.integer(gsub(0, '', storage.vess[[counter]]$month))
# for every site filter and every clim var - IE BCI cld for january  -BCI cld for february -BCI cld formarch
# j is every site
}
}
storage.vess[[1]] %>% View()
class(storage.vess[[counter]]$month)
storage.vess[[1]] %>% View()
# CRU data with final sites and storage vessel list for the long format of data
CRU_fsites <- vector(mode="list", length=length(fsites)*length(v)) # I should have ten of each site (so fsites*v)
storage.vess<- vector(mode="list", length=length(fsites)*length(v)) # and I should have a storage vessel with just as manny
counter=0
for(j in fsites){ # 110 times because 11 clim vars and 10 sites
for(i in seq_along(v)){
# for(v in c(“pet”,tmx”,...))
# i is seq # 1-11 of climvar objs ----- j is fsite raw - smithsonian ---- counter is the iterative # ie 110
# for each climvar in objs we should have a smithsonian for cld smithsonian for dtr etc et
#### Select only FSITES from climvar data
counter <- counter +1 # running fsites* clim vars
print(paste0(j," counter # ", counter, " and clim var ", names(objs[i])))
CRU_fsites[[counter]] <- objs[[i]][match(j, objs[[i]]$sites.sitename),] #go through each climvar and find the specified J aka site
#### Transform data to long format
df<- as.data.frame(CRU_fsites[[counter]]) # make df object
df_long<- reshape(df, #reshape data for plot
times =gsub("X", "", names(df)[-1]),
timevar = "Date",
varying = list(colnames(df[-1])),
v.names = paste0(df$clim),
direction = "long",)
storage.vess[[counter]]<- df_long # store newly reshaped data in new storage vessel
names(storage.vess)[counter] <- j
storage.vess[[counter]]$Date<- anytime::anydate(storage.vess[[counter]]$Date) # change to Date format
storage.vess[[counter]]$climvar <- rep(names(storage.vess[[counter]])[3], times=nrow(storage.vess[[counter]])) # add the climvar column here (needs to be index)
storage.vess[[counter]][,"month"] <- format(storage.vess[[counter]][,"Date"], "%m") # add month col for later processing! --
storage.vess[[counter]]<-storage.vess[[counter]][order(as.numeric(storage.vess[[counter]]$month)),] # order the columns by month so we can use the RLE function
storage.vess[[counter]]<- storage.vess[[counter]] %>%
rename(climvar.class =climvar,
climvar.val = names(storage.vess[[counter]][3]))
# ## We'll want to exclude frs=0
storage.vess[[counter]]<-storage.vess[[counter]] %>% filter(climvar.class != "frs" & climvar.val !=0)
storage.vess[[counter]]$month <-as.integer(storage.vess[[counter]]$month)
# gsub(0, '', storage.vess[[counter]]$month))
# for every site filter and every clim var - IE BCI cld for january  -BCI cld for february -BCI cld formarch
# j is every site
}
}
storage.vess[[1]] %>% View()
### now for the length of storage vess: 12 different month and dfs combos --
months_list<- vector(mode="list", length=length(storage.vess)*12) # one for each month
counter = 0
for(m in 1:12){
for(i in 1:length(storage.vess)){  # so 12 months per cld # 12 * 11 (sites - climvar - month combos)
#12 sites - 11 climvars - 12 month combos  -- so 1,320 dfs
## first 11 (climvars) are dfs of each location with climvar
## 12 months and 166 dataframes with climvar data per sites
## 12 months and 22 dataframes == 12*22 == 264
## so for every dataframe I want to make 12 out of each so 12*166 == 1992
counter = counter+1
print(paste0("month ", m, " i ", i, " counter for dataframes from storage vess (made of 11 diff climvars and each site) ", counter))
months_list[[counter]]<- storage.vess[[i]] %>%  dplyr::filter(climvar.class ==storage.vess[[i]]$climvar.class[1] & month ==m)
#### REPS MONTH ANALYSIS --------------------
if(nrow(months_list[[counter]]) !=0){ # if the dataframe is empty dont go in here
repsmo<- rle(months_list[[counter]][,3])
end = cumsum(repsmo$lengths)
start = c(1, lag(end)[-1] + 1) # https://stackoverflow.com/questions/43875716/find-start-and-end-positions-indices-of-runs-consecutive-values
start.end.indices <-data.frame(start,end) #lags by one - shifts to the left , -1 puts it back ot original place and +1 adds the number to index (c(1)) - lag maintains length
start.df<-months_list[[counter]][start,] # add colanmes to start and end values
end.df<- months_list[[counter]][end,]
colnames(start.df) <- paste0('start_', colnames(start.df))
colnames(end.df) <- paste0('end_', colnames(end.df))
df.indices<-cbind(start.df,end.df) # bind both dataframes
rownames(df.indices)<-c(1:nrow(df.indices)) #change rownames to sequential order
selection<-cbind(df.indices, start.end.indices) # add start and end indices column
selection$rep.yrs <-selection$end -selection$start # 0 is a 0
selection<- selection %>% filter(selection$rep.yrs>=2) # grab only repitions greater than 2 years
selection$rep.yrs <- selection$rep.yrs+1 # add one to all instances to account for start years
months_list[[counter]]<- selection
# ## arrange for ease of viewing, select only relevent variables
months_list[[counter]]<-months_list[[counter]] %>% arrange(desc(rep.yrs))
months_list[[counter]]<- months_list[[counter]][c('start_sites.sitename', 'start_Date', 'start_climvar.val', 'start_climvar.class', 'start_month', 'end_Date', 'rep.yrs')]
#
# # ## grab years only for start / end dates
months_list[[counter]]$start_Date<-as.numeric(format(months_list[[counter]]$start_Date,"%Y"))
months_list[[counter]]$end_Date<-as.numeric(format(months_list[[counter]]$end_Date,"%Y"))
#
# # ## Exclude frs=0
months_list[[counter]]<-months_list[[counter]] %>% filter(start_climvar.class != "frs" & start_climvar.val !=0)
}
}
}
## make DF from list above with all the relevent info for each sites (reps/year ranges)
sites_reps<-do.call("rbind", months_list)
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date+1
problemsites<- sites_reps[sites_reps$check != sites_reps$rep.yrs,]
storage.vess[[12]] %>% head()
storage.vess[[15]] %>% head()
storage.vess[[15]] %>% View()
storage.vess[[15]] %>% View()
# See comments @ end of code for site indices
fsites<-c("Smithsonian Environmental Research Center","Harvard Forest"
,"Smithsonian Conservation Biology Institute", "Lilly Dickey Woods"
,"Ordway-Swisher"                             ,"Yosemite National Park"
,"Wind River"                                 ,"Utah Forest Dynamics Plot"
,"Huai Kha Khaeng"                            ,"Barro Colorado Island",
"Zofin", "Scotty Creek")
# Sites in climate data have _ so replace space with _ to match later
fsites<- gsub(" ", "_", fsites)
path_to_climate_data <- "https://raw.githubusercontent.com/forestgeo/Climate/master/Climate_Data/CRU/CRU_v4_04/"
v<- c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmn", "tmx", "vap", "wet")
objs<- vector(mode = "list", length = length(v))
counter <- 0
# Clean environment ####
rm(list = ls())
#### Sites --------
# ForestGeo sites (and their locations) found in github (all 69)
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
# See comments @ end of code for site indices
fsites<-c("Smithsonian Environmental Research Center","Harvard Forest"
,"Smithsonian Conservation Biology Institute", "Lilly Dickey Woods"
,"Ordway-Swisher"                             ,"Yosemite National Park"
,"Wind River"                                 ,"Utah Forest Dynamics Plot"
,"Huai Kha Khaeng"                            ,"Barro Colorado Island",
"Zofin", "Scotty Creek")
# Sites in climate data have _ so replace space with _ to match later
fsites<- gsub(" ", "_", fsites)
path_to_climate_data <- "https://raw.githubusercontent.com/forestgeo/Climate/master/Climate_Data/CRU/CRU_v4_04/"
v<- c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmn", "tmx", "vap", "wet")
objs<- vector(mode = "list", length = length(v))
counter <- 0
for(clim_v in v) { #  clim_v is each climate variable (v)
counter<- counter + 1
print(paste0(clim_v, " ", counter))
objs[[counter]]<-read.csv(paste0(path_to_climate_data, clim_v, ".1901.2019-ForestGEO_sites-6-03.csv"))
names(objs)[counter] <- clim_v # assign names to list
# adding a col that will show the climate variable (ie cld or pet)
objs[[counter]]$clim<-  gsub(names(objs[counter]), v[counter], names(objs[counter]), ignore.case = FALSE)
}
# CRU data with final sites and storage vessel list for the long format of data
CRU_fsites <- vector(mode="list", length=length(fsites)*length(v)) # I should have ten of each site (so fsites*v)
storage.vess<- vector(mode="list", length=length(fsites)*length(v)) # and I should have a storage vessel with just as manny
counter=0
for(j in fsites){ # 110 times because 11 clim vars and 10 sites
for(i in seq_along(v)){
# for(v in c(“pet”,tmx”,...))
# i is seq # 1-11 of climvar objs ----- j is fsite raw - smithsonian ---- counter is the iterative # ie 110
# for each climvar in objs we should have a smithsonian for cld smithsonian for dtr etc et
#### Select only FSITES from climvar data
counter <- counter +1 # running fsites* clim vars
print(paste0(j," counter # ", counter, " and clim var ", names(objs[i])))
CRU_fsites[[counter]] <- objs[[i]][match(j, objs[[i]]$sites.sitename),] #go through each climvar and find the specified J aka site
#### Transform data to long format
df<- as.data.frame(CRU_fsites[[counter]]) # make df object
df_long<- reshape(df, #reshape data for plot
times =gsub("X", "", names(df)[-1]),
timevar = "Date",
varying = list(colnames(df[-1])),
v.names = paste0(df$clim),
direction = "long",)
storage.vess[[counter]]<- df_long # store newly reshaped data in new storage vessel
names(storage.vess)[counter] <- j
storage.vess[[counter]]$Date<- anytime::anydate(storage.vess[[counter]]$Date) # change to Date format
storage.vess[[counter]]$climvar <- rep(names(storage.vess[[counter]])[3], times=nrow(storage.vess[[counter]])) # add the climvar column here (needs to be index)
storage.vess[[counter]][,"month"] <- format(storage.vess[[counter]][,"Date"], "%m") # add month col for later processing! --
storage.vess[[counter]]<-storage.vess[[counter]][order(as.numeric(storage.vess[[counter]]$month)),] # order the columns by month so we can use the RLE function
storage.vess[[counter]]<- storage.vess[[counter]] %>%
rename(climvar.class =climvar,
climvar.val = names(storage.vess[[counter]][3]))
# ## We'll want to exclude frs=0
storage.vess[[counter]]<-storage.vess[[counter]] %>% filter(climvar.class != "frs" & climvar.val !=0)
storage.vess[[counter]]$month <-as.integer(storage.vess[[counter]]$month)
# gsub(0, '', storage.vess[[counter]]$month))
# for every site filter and every clim var - IE BCI cld for january  -BCI cld for february -BCI cld formarch
# j is every site
}
}
### now for the length of storage vess: 12 different month and dfs combos --
months_list<- vector(mode="list", length=length(storage.vess)*12) # one for each month
counter = 0
for(m in 1:12){
for(i in 1:length(storage.vess)){  # so 12 months per cld # 12 * 11 (sites - climvar - month combos)
#12 sites - 11 climvars - 12 month combos  -- so 1,320 dfs
## first 11 (climvars) are dfs of each location with climvar
## 12 months and 166 dataframes with climvar data per sites
## 12 months and 22 dataframes == 12*22 == 264
## so for every dataframe I want to make 12 out of each so 12*166 == 1992
counter = counter+1
print(paste0("month ", m, " i ", i, " counter for dataframes from storage vess (made of 11 diff climvars and each site) ", counter))
months_list[[counter]]<- storage.vess[[i]] %>%  dplyr::filter(climvar.class ==storage.vess[[i]]$climvar.class[1] & month ==m)
#### REPS MONTH ANALYSIS --------------------
if(nrow(months_list[[counter]]) !=0){ # if the dataframe is empty dont go in here
repsmo<- rle(months_list[[counter]][,3])
end = cumsum(repsmo$lengths)
start = c(1, lag(end)[-1] + 1) # https://stackoverflow.com/questions/43875716/find-start-and-end-positions-indices-of-runs-consecutive-values
start.end.indices <-data.frame(start,end) #lags by one - shifts to the left , -1 puts it back ot original place and +1 adds the number to index (c(1)) - lag maintains length
start.df<-months_list[[counter]][start,] # add colanmes to start and end values
end.df<- months_list[[counter]][end,]
colnames(start.df) <- paste0('start_', colnames(start.df))
colnames(end.df) <- paste0('end_', colnames(end.df))
df.indices<-cbind(start.df,end.df) # bind both dataframes
rownames(df.indices)<-c(1:nrow(df.indices)) #change rownames to sequential order
selection<-cbind(df.indices, start.end.indices) # add start and end indices column
selection$rep.yrs <-selection$end -selection$start # 0 is a 0
selection<- selection %>% filter(selection$rep.yrs>=2) # grab only repitions greater than 2 years
selection$rep.yrs <- selection$rep.yrs+1 # add one to all instances to account for start years
months_list[[counter]]<- selection
# ## arrange for ease of viewing, select only relevent variables
months_list[[counter]]<-months_list[[counter]] %>% arrange(desc(rep.yrs))
months_list[[counter]]<- months_list[[counter]][c('start_sites.sitename', 'start_Date', 'start_climvar.val', 'start_climvar.class', 'start_month', 'end_Date', 'rep.yrs')]
#
# # ## grab years only for start / end dates
months_list[[counter]]$start_Date<-as.numeric(format(months_list[[counter]]$start_Date,"%Y"))
months_list[[counter]]$end_Date<-as.numeric(format(months_list[[counter]]$end_Date,"%Y"))
#
# # ## Exclude frs=0
months_list[[counter]]<-months_list[[counter]] %>% filter(start_climvar.class != "frs" & start_climvar.val !=0)
}
}
}
## make DF from list above with all the relevent info for each sites (reps/year ranges)
sites_reps<-do.call("rbind", months_list)
#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----#----
sites_reps$check<- sites_reps$end_Date- sites_reps$start_Date+1
problemsites<- sites_reps[sites_reps$check != sites_reps$rep.yrs,]
getwd()
##change wd
setwd(paste0(getwd(), "/CRU/scripts/CRU_gap_analysis"))
getwd()
paste0(getwd(), "/CRU/scripts/CRU_gap_analysis")
##change wd
setwd(paste0(getwd(), "/CRU/scripts/CRU_gaps_analysis"))
##change wd
setwd(paste0(getwd(), "/CRU/scripts/CRU_gaps_analysis"))
getwd()
##change wd
setwd(paste0(getwd(), "/CRU/scripts/CRU_gaps_analysis"))
getwd()
##change wd
setwd(paste0(getwd(), "/Climate_Data/CRU/scripts/CRU_gaps_analysis"))
##write.csv remember to always include row.names = FALSE.
write.csv(sites_reps, "all_sites.reps.csv", row.names = FALSE.)
##write.csv remember to always include row.names = FALSE.
write.csv(sites_reps, "all_sites.reps.csv", row.names = FALSE)
## write csv of problem sites where rep years wont be accurate due to jumps in data
write.csv(problemsites, "problem_sites.csv", row.names=FALSE)
sites_reps
## let's make sure problem sites arent in the sites reps csv
sites_reps[!problemsites]
sites_reps[sites_reps$check != sites_reps$rep.yrs,]
sites_reps
sites_reps[sites_reps$check == sites_reps$rep.yrs,]
## without the problem sites
sites_reps<- sites_reps[sites_reps$check == sites_reps$rep.yrs,]
##change wd
setwd(paste0(getwd(), "/Climate_Data/CRU/scripts/CRU_gaps_analysis"))
getwd()
##write.csv remember to always include row.names = FALSE.
write.csv(sites_reps, "all_sites.reps.csv", row.names = FALSE)
sites_reps %>% rename(month = start_month)
sites_reps<- sites_reps %>% rename(month = start_month) #rename startmonth to month
##write.csv remember to always include row.names = FALSE.
write.csv(sites_reps, "all_sites.reps.csv", row.names = FALSE)
