#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
View(test)
##split data to only show growing months (may - august)
test$day <- substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0)
View(test)
test_grow <- test[test$day >= 2019-05-01 & test$day <= 2019-08-31, ]
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= 2019-05-01 & test$day <= 2019-08-31, ]
View(test_grow)
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test_grow)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#basic graphs of 5-minute averages:
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/plots/2017_Weather_Stats.pdf", width=12) #before running the graph scripts
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test_grow)
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
View(test)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
View(test)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hm(test$TIMESTAMP_TS, tz = "EST")
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
test$TIMESTAMP_TS
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
View(test)
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test)
View(test_grow)
View(test)
test_grow <- test[test$day >= "2018-05-01" & test$day <= "2018-08-31", ]
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#1 solar radiation Kipp&Zonen ####
ggplot(data = test_grow) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
library(dplyr)
q <- test_grow %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`))
library(esquisse)
esquisser()
View(test_grow)
q <- test_grow %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_Li_Avg_W/m2`))
esquisser()
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2017 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2017.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
#remove unnecessary rows
test <- data_2017[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
pdf(file="Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/plots/2017_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test_grow) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
View(test)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
library(lubridate)
library(ggplot2)
library(dplyr)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2018-05-01" & test$day <= "2018-08-31", ]
test_rad <- test_grow[c(1,3)]
test_rad$day <- substr(test_rad$TIMESTAMP_TS, 1, nchar(test_rad$TIMESTAMP_TS)-0)
View(test_rad)
colnames(test_rad[2])
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(RadTot_KZ_Avg_W/m2, na.rm=TRUE))
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum("RadTot_KZ_Avg_W/m2", na.rm=TRUE))
test_rad <- test_rad[!is.na(test_rad$TIMESTAMP_TS), ]
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(RadTot_KZ_Avg_W/m2, na.rm=TRUE))
View(test_rad)
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`, na.rm=TRUE))
View(q)
library(esquisse)
esquisser()
test_rad$day <- as.character(test_rad$day)
esquisser()
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`))
View(test_rad)
View(test)
View(q)
q$day <- as.character(q$day)
esquisser()
ggplot(data=q) +
geom_bar(aes(x=day, y=total_Rad))
ggplot(q, aes(day, total_Rad)) +
geom_bar() +
theme_minimal()
ggplot(q, aes(day, total_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
test_rad <- test_grow[c(1,5)]
test_rad$day <- substr(test_rad$TIMESTAMP_TS, 1, nchar(test_rad$TIMESTAMP_TS)-0)
test_rad$day <- as.character(test_rad$day)
test_rad <- test_rad[!is.na(test_rad$TIMESTAMP_TS), ]
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_Li_Avg_W/m2`))
q$day <- as.character(q$day)
ggplot(q, aes(day, total_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
library(lubridate)
library(ggplot2)
library(dplyr)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2018-05-01" & test$day <= "2018-08-31", ]
#distribution over specific timeframe subset ####
test_rad <- test_grow[c(1,5)]
test_rad$day <- substr(test_rad$TIMESTAMP_TS, 1, nchar(test_rad$TIMESTAMP_TS)-0)
test_rad$day <- as.character(test_rad$day)
test_rad <- test_rad[!is.na(test_rad$TIMESTAMP_TS), ]
q <- test_rad %>%
group_by(day) %>%
summarize(mean_Rad = mean(`RadTot_Li_Avg_W/m2`))
q$day <- as.character(q$day)
ggplot(q, aes(day, total_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
ggplot(q, aes(day, mean_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
install.packages("raster")
# from forestgeo github
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
View(ForestGEO_sites)
ForestGEO_sites$lat
ForestGEO_sites$Latitude
!is.na(ForestGEO_sites$Latitude)
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Latitude),]
ForestGEO_sites
ForestGEO_sites %>% View()
library(dplyr)
install.packages("dplyr")
ForestGEO_sites %>% View()
library(dplyr)
library(dplyr)
ForestGEO_sites %>% View()
names(ForestGEO_sites)
c("ID", "sites.sitename", "lat", "lon")
# from forestgeo github
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
names(ForestGEO_sites) <- c("ID", "sites.sitename", "lat", "lon")
names(ForestGEO_sites)
(ForestGEO_sites$Lat)
!is.na(ForestGEO_sites$Lat)
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Lat),]
points <- ForestGEO_sites
head(points)
# from forestgeo github
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Lat),]
points <- ForestGEO_sites
head(points)
summary(points)
ForestGEO_sites$Lat<- ForestGEO_sites$Latitude
ForestGEO_sites$Lat
ForestGEO_sites$Lon<- ForestGEO_sites$Longitude
points <- ForestGEO_sites
head(points)
summary(points)
head(points)
points[,1]
#long and lat
coordinates(points)<-c("lon", "lat")
library(sp)
#long and lat
coordinates(points)<-c("lon", "lat")
coordinates(points)
c("lon", "lat")
#long and lat
coordinates(points)<-c("lon", "lat")
# from forestgeo github
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Lat),]
ForestGEO_sites$lat<- ForestGEO_sites$Latitude
ForestGEO_sites$lat<- ForestGEO_sites$Latitude
ForestGEO_sites$lon<- ForestGEO_sites$Longitude
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Lat),]
points <- ForestGEO_sites
head(points)
summary(points)
points[,1]
#long and lat
coordinates(points)<-c("lon", "at")
#long and lat
coordinates(points)<-c("lon", "lat")
#create a spatial points dataframe
proj<-CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
proj4string(points)<-proj
plot(points)
#make this back to a normal dataframe
as.data.frame(points)
install.packages("ncdf4")
install.packages("R.utils")
getwd()
###   --- Set and check the working directory ----------------------------------------------------------- ####
#v4.03 version
setwd('C:\Users\GonzalezB2\Desktop\Smithsonian\climate-gz-files')
###   --- Set and check the working directory ----------------------------------------------------------- ####
#v4.03 version
setwd('C:/Users/GonzalezB2/Desktop/Smithsonian/climate-gz-files')
getwd()
list.files()
list.files(path = "gzfiles/", pattern = "\\.nc.gz$")
paste('gzfiles/'
)
paste('gzfiles/', list.files(path = "gzfiles/", pattern = "\\.nc.gz$"), sep='')
source('C:/Users/GonzalezB2/Desktop/Smithsonian/Climate/scripts/brickCRU_MW.R', echo=TRUE)
list.files(path = "gzfiles/", pattern = "\\.nc.gz$")
paste0(getwd())
list.files(path = paste0(getwd()), pattern = "\\.nc.gz$")
# list files with the .gz extension (should be 10)
gzfilenames <- list.files(path = paste0(getwd()), pattern = "\\.nc.gz$")
gzfilenames
gzfilenames[1]
# filename placeholders after below loop unzipping .gz files
ncfilenames <- gsub("\\.nc.gz$", "\\.nc", gzfilenames)
ncfilenames <- gsub("gzfiles", "ncfiles", ncfilenames)
library(raster)
library(R.utils)
1:length(gzfilenames)
for(i in 1:length(gzfilenames)) {
print(paste("unzipping", gzfilenames[i], "into", ncfilenames[i]))
gunzip(gzfilenames[i], ncfilenames[i], remove=FALSE)
}
###   --- Set and check the working directory ----------------------------------------------------------- ####
#v4.03 version
setwd('S:/Global Maps Data/CRU/v4.03/')
list.files()
list.files(path = 'S:\Global Maps Data\CRU\v4.03\gzfiles', pattern = "\\.nc.gz$")
# list files with the .gz extension (should be 10)
gzfilenames <- list.files(path = 'S:/Global Maps Data/CRU/v4.03/gzfiles', pattern = "\\.nc.gz$")
source('C:/Users/GonzalezB2/Desktop/Smithsonian/Climate/scripts/brickCRU_MW.R', echo=TRUE)
list.files(path = 'S:/Global Maps Data/CRU/v4.03/gzfiles', pattern = "\\.nc.gz$")
detach("package:R.utils", unload=TRUE)
getwd()
# BG: if updating data - make a dir in this S drive and add the new version name with files
#v4.03 version - 2018 data - updated in 2020 by BG
setwd('S:/Global Maps Data/CRU/v4.03/')
getwd()
points
# from forestgeo github
ForestGEO_sites <- read.csv("https://raw.githubusercontent.com/forestgeo/Site-Data/master/ForestGEO_site_data.csv")
# points of interest
ForestGEO_sites$lat<- ForestGEO_sites$Latitude
ForestGEO_sites$lon<- ForestGEO_sites$Longitude
ForestGEO_sites <- ForestGEO_sites[!is.na(ForestGEO_sites$Lat),]
points <- ForestGEO_sites
head(points)
summary(points)
points[,1]
#long and lat
coordinates(points)<-c("lon", "lat")
#create a spatial points dataframe
proj<-CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
proj4string(points)<-proj
plot(points)
#make this back to a normal dataframe
as.data.frame(points)
for(v in c("cld", "dtr", "frs", "pet", "pre", "tmn", "tmp", "tmn", "tmx", "vap", "wet")) {
print(paste("extracting", v, "data for ForestGEo sites"))
r <- brick(paste0("ncfiles/cru_ts4.03.1901.2018.", v, ".dat.nc"), varname = v)   #maybe ~3mins
x <- extract(r, points) #maybe ~15 mins #, ncol=2
head(x)
x <- cbind(sites.sitename = gsub(" ", "_", points@data$Site), x)
write.csv(x, file = paste0(v, ".1901.2018-ForestGEO_sites-5-20.csv"), row.names = F)
}
# Clean environment ####
rm(list = ls())
getwd()
setwd(".")
getwd()
install.packages("lubridate")
# Load libraries ####
library(lubridate)
getwd()
# Load data ####
CRU_PET <- read.csv("S:/Global Maps Data/CRU/v4.03/pet.1901.2018-ForestGEO_sites-5-18.csv")
# Load data ####
CRU_PET <- read.csv("S:/Global Maps Data/CRU/v4.03/pet.1901.2018-ForestGEO_sites-5-20")
CRU_PET <- read.csv("S:/Global Maps Data/CRU/v4.03/pet.1901.2018-ForestGEO_sites-5-20.csv")
head(CRU_PET[, c(1:6)])
nb.days.in.month <- days_in_month(as.Date(names(CRU_PET)[-1], format = "X%Y.%m.%d"))
CRU_PET[, -1] <- CRU_PET[, -1] * matrix(rep(nb.days.in.month, each = nrow(CRU_PET)), nrow = nrow(CRU_PET))
#save ####
write.csv(CRU_PET, "S:/Global Maps Data/CRU/v4.03/pet_sum.1901.2018-ForestGEO_sites-5-20.csv", row.names = F)
